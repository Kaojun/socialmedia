{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/WithAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","to","src","avatar","name","Message","message","maxln","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","className","s","addpost","Field","component","FormControl","typeF","validate","required","placeholder","Dialogs","state","dialogPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","value","sendmsg","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","Component","RedComp","this","React","connect","dispatch","sendMessageCreator"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,KAAO,sBAAsB,SAAW,4B,sFCc9JC,EAZI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,6BACH,kBAAC,IAAD,CAASC,GAAIF,GACT,iCAAM,yBAAKG,IAAKJ,EAAMK,SAEjBL,EAAMM,SCDRC,EANC,SAACP,GACb,OAAO,6BACFA,EAAMQ,U,kCC4BTC,EAAQC,YAAiB,IAezBC,EAAsBC,YAAW,CAACC,KAAO,wBAAnBD,EAdL,SAACZ,GAEvB,OAAU,0BAAMc,SAAUd,EAAMe,cAE/B,yBAAKC,UAAWC,IAAEC,SACjB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACdC,MAAM,WACNC,SAAU,CAACC,IAAUf,GACrBH,KAAK,iBAAiBmB,YAAY,uBACtC,iDAOYC,EA1CC,SAAC1B,GAChB,IAAI2B,EAAQ3B,EAAM4B,WACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAY1B,KAAM0B,EAAE1B,KAAM2B,IAAKD,EAAE9B,GAAIA,GAAI8B,EAAE9B,GAAIG,OAAQ2B,EAAE3B,YAClG6B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAS5B,QAAS4B,EAAE5B,QAASyB,IAAKG,EAAElC,QAMnF,OACC,yBAAKc,UAAWC,IAAEa,SACjB,yBAAKd,UAAWC,IAAEoB,cAChBR,GAEF,yBAAKb,UAAWC,IAAEkB,UAChBD,GAEF,kBAACvB,EAAD,CAAqBG,SAZH,SAACwB,GAAD,OACpBtC,EAAMuC,QAAQD,EAAME,qB,wDCNjBC,G,MAA6B,SAACd,GAAD,MAAY,CAC5Ce,OAASf,EAAMgB,KAAKD,U,OCSNE,uBDLiB,SAACC,GAAe,IAEzCC,EAFwC,uKAK5C,OAAKC,KAAK/C,MAAM0C,OACT,kBAACG,EAAcE,KAAK/C,OADI,kBAAC,WAAD,CAAUG,GAAI,eALD,GAExB6C,IAAMH,WAS5B,OADqCI,YAAQR,EAARQ,CAAoCH,KCJzEG,aAZqB,SAACtB,GACtB,MAAO,CACNC,WAAYD,EAAMC,eAGK,SAACsB,GACzB,MAAO,CACNX,QAAS,SAACC,GAAD,OAAoBU,EAASC,YAAmBX,SAI5CI,CAGdlB","file":"static/js/3.bc236749.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__QX81I\",\"addpost\":\"Dialogs_addpost__3pSdw\",\"dialogsItems\":\"Dialogs_dialogsItems__3zuxM\",\"post\":\"Dialogs_post__2X1c7\",\"messages\":\"Dialogs_messages__YaxRB\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div>\r\n        <NavLink to={path}>\r\n            <div> <img src={props.avatar}/>\r\n\r\n                {props.name}</div>\r\n        </NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div>\r\n        {props.message}\r\n    </div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {FormControl, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n\tlet state = props.dialogPage;\r\n\tlet dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} avatar={d.avatar}/>);\r\n\tlet messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n\tlet addNewMessage = (value) =>\r\n\tprops.sendmsg(value.newMessageBody)\r\n\r\n\r\n\treturn (\r\n\t\t<div className={s.dialogs}>\r\n\t\t\t<div className={s.dialogsItems}>\r\n\t\t\t\t{dialogsElements}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.messages}>\r\n\t\t\t\t{messagesElements}</div>\r\n\r\n\t\t\t<AddMessageFormRedux onSubmit={addNewMessage}  />\r\n\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nconst maxln = maxLengthCreator(20)\r\nconst AddMessageForm = (props) =>\r\n{\r\n\treturn \t\t\t<form onSubmit={props.handleSubmit}>\r\n\r\n\t\t<div className={s.addpost}>\r\n\t\t\t<Field component={FormControl}\r\n\t\t\t\t\t\t typeF=\"textarea\"\r\n\t\t\t\t\t\t validate={[required, maxln ]}\r\n\t\t\t\t\t\t name=\"newMessageBody\" placeholder='Enter your message' />\r\n\t\t\t<button>Add post</button>\r\n\t\t</div>\r\n\t</form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm ({form : \"dialogAddMessageForm\" })(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData} from \"../redux/Auth-reducer\";\n\n\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n\tisAuth : state.auth.isAuth\n})\n\n\nexport const withAuthRedirect = (Component) => {\n\n\tclass RedComp extends React.Component {\n\t\trender() {\n\t\t\t// alert(this.props.isAuth)\n\t\t\tif (!this.props.isAuth) return <Redirect to={\"/login\"}/>            // первая RedComp\n\t\t\treturn <Component {...this.props} />\n\t\t}\n\t}\n\n\tlet\tConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedComp)  //конект оборачивает RedComp другой компонентой\n\treturn ConnectedAuthRedirectComponent                                           // и передает ей из стейста ис аус\n}\n","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {sendMessageCreator} from \"../../redux/DialogsPage-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tdialogPage: state.dialogPage\r\n\t}\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tsendmsg: (newMessageBody) => dispatch(sendMessageCreator(newMessageBody))\r\n\t}\r\n}\r\n\r\nexport default compose(withAuthRedirect,\r\n\tconnect(mapStateToProps, mapDispatchToProps)                // контейнерная\r\n\t)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// хок\r\n(Dialogs)                                                   // функциональная"],"sourceRoot":""}